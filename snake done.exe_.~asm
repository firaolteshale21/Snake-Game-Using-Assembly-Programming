data segment

letter_addresses dw 2484, 2120, 1712, 488, 1862, 692, 968, 3374, 1536, 1880, 2048, 3072, 1456, 1832, 2764, 1216, 3480, 3992, 2376, 3540
snake_address dw 2482, 15 Dup(0)
collected_letters db '*', 15 Dup(0)
collected_count db 1
end_message db "$"
target_count db 20 ; Updated target count to match new number of letters
score_buffer db "0"
score_position dw 0B00h
ends

stack segment
dw 128 dup(0)
ends

code segment
start:
mov ax, data
mov ds, ax

mov ax, 0b800h
mov es, ax

cld

; Set cursor position
mov ah, 1
mov ch, 2bh
mov cl, 0bh
int 10h

call clear_screen
jmp start_game

start_game:
call place_letters
call update_score

xor cl, cl
xor dl, dl

read_input:
mov ah, 1
int 16h
jz skip_input
mov ah, 0
int 16h
and al, 0dfh
mov dl, al
jmp skip_input

skip_input:
cmp dl, 1bh
je exit_game

check_direction:
cmp dl, 'A'
jne check_right
call move_left
mov cl, dl
jmp read_input

check_right:
cmp dl, 'D'
jne check_up
call move_right
mov cl, dl
jmp read_input

check_up:
cmp dl, 'W'
jne check_down
call move_up
mov cl, dl
jmp read_input

check_down:
cmp dl, 'S'
jne read_next
call move_down
mov cl, dl
jmp read_input

read_next:
mov dl, cl
jmp read_input

exit_game:
xor cx, cx
mov dh, 24
mov dl, 79
mov bh, 7
mov ax, 700h
int 10h
mov ax, 4c00h
int 21h
ends

place_letters proc
mov di, snake_address
mov dl, collected_letters
es: mov [di], dl

mov cl, target_count
lea si, letter_addresses

place_loop:
lodsw
mov di, ax
mov dl, '*'
es: mov [di], dl
loop place_loop
ret
endp

move_left proc
push dx
call shift_addresses
sub word ptr [snake_address], 2
call check_eat
call move_snake
pop dx
ret
endp

move_right proc
push dx
call shift_addresses
add word ptr [snake_address], 2
call check_eat
call move_snake
pop dx
ret
endp

move_up proc
push dx
call shift_addresses
sub word ptr [snake_address], 160
call check_eat
call move_snake
pop dx
ret
endp

move_down proc
push dx
call shift_addresses
add word ptr [snake_address], 160
call check_eat
call move_snake
pop dx
ret
endp

shift_addresses proc
push ax
xor ch, ch
xor bh, bh
mov cl, collected_count
inc cl
mov al, 2
mul cl
mov bl, al

xor dx, dx

shift_snake:
mov dx, word ptr [snake_address + bx - 2]
mov word ptr [snake_address + bx], dx
sub bx, 2
loop shift_snake
pop ax
ret
endp

check_eat proc
push ax
push cx

mov di, word ptr [snake_address]
es: cmp [di], 0
jz no_letter
es: cmp [di], 20h
jz no_letter
xor ch, ch
mov cl, target_count
xor si, si
check_loop:
cmp di, word ptr [letter_addresses + si]
jz add_letter
add si, 2
loop check_loop
jmp no_letter
add_letter:
mov word ptr [letter_addresses + si], 0
xor bh, bh
mov bl, collected_count
es: mov dl, [di]
mov [collected_letters + bx], dl
es: mov [di], 0
add collected_count, 1
sub target_count, 1
call update_score
no_letter:
pop cx
pop ax
ret
endp

move_snake proc
xor ch, ch
xor si, si
xor dl, dl
mov cl, collected_count
xor bx, bx
move_loop:
mov di, word ptr [snake_address + si]
mov dl, [collected_letters + bx]
es: mov [di], dl
add si, 2
inc bx
loop move_loop
mov di, word ptr [snake_address + si]
es: mov [di], 0
ret
endp

clear_screen proc
xor cx, cx
mov dh, 24
mov dl, 79
mov bh, 7
mov ax, 700h
int 10h
ret
endp

update_score proc
push ax
push bx
push cx
push dx
push si
push di

lea di, score_position
mov cx, 1
mov al, ' '
stosb

mov al, byte ptr collected_count
add al, '0'
mov score_buffer, al

lea si, score_buffer
lea di, score_position
mov cx, 1
rep movsb

pop di
pop si
pop dx
pop cx
pop bx
pop ax
ret
endp

end start




; [SOURCE]: C:\emu8086\MySource\snake done.asm
